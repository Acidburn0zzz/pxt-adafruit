{
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative). \nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.constrain": "Constrain\nConstrains a number to be within a range.\n\n\n\n@returns x: if x is between a and b, a: if x is less than a, b: if x is greater than b",
  "Math.map": "Map\nRe-maps a number from one range to another. \nThat is, a value of fromLow would get mapped to toLow, a value of fromHigh to toHigh, \nvalues in-between to values in-between, etc.\n\n\n\n\n\n@returns The mapped value.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "the number to map",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and `max`.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "String.charAt": "Returns the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Returns the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "Determines whether relative order of two strings (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "basic": "Provides access to basic device functionality.",
  "basic.forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "basic.pause": "Pause for the specified time in milliseconds",
  "basic.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "control": "Runtime and event utilities.\n\nArduino control functions",
  "control.assert": "Display specified error code and stop the program.",
  "control.panic": "Display specified error code and stop the program.",
  "input.runningTime": "Gets the number of milliseconds elapsed since power on.",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...\n\nArduino functions",
  "pins.analogPitch": "Emits a Pulse-width modulation (PWM) signal to the current pitch pin. Use `analog set pitch pin`\nto define the pitch pin.",
  "pins.analogPitch|param|frequency": "frequency to modulate in Hz.",
  "pins.analogPitch|param|ms": "duration of the pitch in milli seconds.",
  "pins.analogSetPitchPin": "Sets the pin used when using `analog pitch` or music.",
  "pins.analogSetPitchPin|param|name": "pin to modulate pitch from",
  "pins.createBuffer": "Create a new zero-initialized buffer.",
  "pins.createBuffer|param|size": "number of bytes in the buffer",
  "pins.map": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "pins.map|param|fromHigh": "the upper bound of the value's current range, eg: 1023",
  "pins.map|param|fromLow": "the lower bound of the value's current range",
  "pins.map|param|toHigh": "the upper bound of the value's target range, eg: 4",
  "pins.map|param|toLow": "the lower bound of the value's target range",
  "pins.map|param|value": "value to map in ranges",
  "pins.pulseDuration": "Gets the duration of the last pulse in micro-seconds. This function should be called from a\n``onPulsed`` handler.",
  "pins.sizeOf": "Get the size in bytes of specified number format.",
  "serial": "Reading and writing data over a serial connection.",
  "serial.writeLine": "Prints a line of text to the serial",
  "serial.writeNumber": "Prints a numeric value to the serial",
  "serial.writeString": "Sends a piece of text through Serial connection.",
  "serial.writeValue": "Writes a ``name: value`` pair line to the serial.",
  "serial.writeValue|param|name": "name of the value stream, eg: x",
  "serial.writeValue|param|value": "to write"
}