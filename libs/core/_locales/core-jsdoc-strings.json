{
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative). \nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.constrain": "Constrain\nConstrains a number to be within a range.\n\n\n\n@returns x: if x is between a and b, a: if x is less than a, b: if x is greater than b",
  "Math.map": "Map\nRe-maps a number from one range to another. \nThat is, a value of fromLow would get mapped to toLow, a value of fromHigh to toHigh, \nvalues in-between to values in-between, etc.\n\n\n\n\n\n@returns The mapped value.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "the number to map",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and `max`.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "String.charAt": "Returns the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Returns the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "Determines whether relative order of two strings (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "control": "Arduino control functions",
  "control.assert": "Display specified error code and stop the program.",
  "control.delay": "Delay\nPauses the program for the amount of time (in miliseconds) specified as parameter.\n(There are 1000 milliseconds in a second.)",
  "control.delayMicroseconds": "Delay\nPauses the program for the amount of time (in microseconds) specified as parameter.\nThere are a thousand microseconds in a millisecond, and a million microseconds in a second.",
  "control.delayMicroseconds|param|us": "the number of microseconds to pause",
  "control.delay|param|ms": "the number of milliseconds to pause, eg: 1000",
  "control.micros": "Millis\nReturns the number of microseconds since the Arduino board began running the current program.\nThis number will overflow (go back to zero), after approximately 70 minutes.",
  "control.millis": "Millis\nReturns the number of milliseconds since the Arduino board began running the current program. \nThis number will overflow (go back to zero), after approximately 50 days.",
  "control.panic": "Display specified error code and stop the program.",
  "math.randomMinMax": "Random\nThe random function generates pseudo-random numbers.\n\n\n@returns a random number between min and max-1",
  "math.randomMinMax|param|max": "upper bound of the random value, exclusive, eg: 10",
  "math.randomMinMax|param|min": "lower bound of the random value, inclusive, eg: 0",
  "music": "Functions for playing audio / music",
  "music.noTone": "No tone\nStops the generation of a square wave triggered by tone(). Has no effect if no tone is being generated.",
  "music.noTone|param|pin": "the pin on which to stop generating the tone",
  "music.tone": "Tone\nGenerates a square wave of the specified frequency (and 50% duty cycle) on a pin. \nA duration can be specified, otherwise the wave continues until a call to noTone().\nThe pin can be connected to a piezo buzzer or other speaker to play tones.",
  "music.tone|param|frequency": "the frequency of the tone in hertz",
  "music.tone|param|pin": "the pin on which to generate the tone",
  "pins": "Arduino functions",
  "pins.analogRead": "Analog Read\nReads the value from the specified analog pin.",
  "pins.analogRead|param|pin": "the number of the analog input pin to read from (0 to 5 on most boards, 0 to 7 on the Mini and Nano, 0 to 15 on the Mega)",
  "pins.analogWrite": "Analog Write\nWrites an analog value to a pin. \nCan be used to light a LED at varying brightnesses or drive a motor at various speeds.",
  "pins.analogWrite|param|pin": "the pin to write to.",
  "pins.analogWrite|param|value": "the duty cycle: between 0 (always off) and 255 (always on).",
  "pins.digitalRead": "Digital Read",
  "pins.digitalRead|param|pin": "the number of the pin",
  "pins.digitalWrite": "Digital Write",
  "pins.digitalWrite|param|pin": "the number of the pin",
  "pins.digitalWrite|param|value": "HIGH or LOW",
  "pins.pinMode": "Pin Mode",
  "pins.pinMode|param|mode": "INPUT, OUTPUT, or INPUT_PULLUP",
  "pins.pinMode|param|pin": "the number of the pin whose mode you wish to set",
  "pins.pulseIn": "Pulse In\nReads a pulse (either HIGH or LOW) on a pin.\n\n\n\n@returns the length of the pulse (in microseconds) or 0 if no pulse is completed before the timeout",
  "pins.pulseIn|param|pin": "the number of the pin on which you want to read the pulse. (int)",
  "pins.pulseIn|param|state": "type of pulse to read: either HIGH or LOW. (int)",
  "pins.pulseIn|param|timeout": "the number of microseconds to wait for the pulse to be completed: the function returns 0 if no complete pulse was received within the timeout. Default is one second."
}